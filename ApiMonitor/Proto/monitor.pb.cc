// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "monitor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ApiMonitor {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* Call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddHook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddHook_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveHook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveHook_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonitorMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonitorMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_monitor_2eproto() {
  protobuf_AddDesc_monitor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "monitor.proto");
  GOOGLE_CHECK(file != NULL);
  Call_descriptor_ = file->message_type(0);
  static const int Call_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, uihookid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, uiparameter_),
  };
  Call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_descriptor_,
      Call::default_instance_,
      Call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call));
  AddHook_descriptor_ = file->message_type(1);
  static const int AddHook_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddHook, uihookid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddHook, strdllname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddHook, strfunctionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddHook, uinumparameters_),
  };
  AddHook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddHook_descriptor_,
      AddHook::default_instance_,
      AddHook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddHook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddHook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddHook));
  RemoveHook_descriptor_ = file->message_type(2);
  static const int RemoveHook_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveHook, uihookid_),
  };
  RemoveHook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveHook_descriptor_,
      RemoveHook::default_instance_,
      RemoveHook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveHook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveHook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveHook));
  MonitorMessage_descriptor_ = file->message_type(3);
  static const int MonitorMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorMessage, maddhook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorMessage, mremovehook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorMessage, mcall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorMessage, biscontinue_),
  };
  MonitorMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonitorMessage_descriptor_,
      MonitorMessage::default_instance_,
      MonitorMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonitorMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_monitor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_descriptor_, &Call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddHook_descriptor_, &AddHook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveHook_descriptor_, &RemoveHook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonitorMessage_descriptor_, &MonitorMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_monitor_2eproto() {
  delete Call::default_instance_;
  delete Call_reflection_;
  delete AddHook::default_instance_;
  delete AddHook_reflection_;
  delete RemoveHook::default_instance_;
  delete RemoveHook_reflection_;
  delete MonitorMessage::default_instance_;
  delete MonitorMessage_reflection_;
}

void protobuf_AddDesc_monitor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmonitor.proto\022\023ApiMonitor.ProtoBuf\"-\n\004"
    "Call\022\020\n\010uiHookId\030\001 \002(\r\022\023\n\013uiParameter\030\002 "
    "\003(\004\"a\n\007AddHook\022\020\n\010uiHookId\030\001 \002(\r\022\022\n\nstrD"
    "llName\030\002 \002(\t\022\027\n\017strFunctionName\030\003 \002(\t\022\027\n"
    "\017uiNumParameters\030\004 \002(\r\"\036\n\nRemoveHook\022\020\n\010"
    "uiHookId\030\001 \002(\r\"\265\001\n\016MonitorMessage\022.\n\010mAd"
    "dHook\030\001 \001(\0132\034.ApiMonitor.ProtoBuf.AddHoo"
    "k\0224\n\013mRemoveHook\030\002 \001(\0132\037.ApiMonitor.Prot"
    "oBuf.RemoveHook\022(\n\005mCall\030\003 \001(\0132\031.ApiMoni"
    "tor.ProtoBuf.Call\022\023\n\013bIsContinue\030\004 \001(\010", 398);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "monitor.proto", &protobuf_RegisterTypes);
  Call::default_instance_ = new Call();
  AddHook::default_instance_ = new AddHook();
  RemoveHook::default_instance_ = new RemoveHook();
  MonitorMessage::default_instance_ = new MonitorMessage();
  Call::default_instance_->InitAsDefaultInstance();
  AddHook::default_instance_->InitAsDefaultInstance();
  RemoveHook::default_instance_->InitAsDefaultInstance();
  MonitorMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_monitor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_monitor_2eproto {
  StaticDescriptorInitializer_monitor_2eproto() {
    protobuf_AddDesc_monitor_2eproto();
  }
} static_descriptor_initializer_monitor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Call::kUiHookIdFieldNumber;
const int Call::kUiParameterFieldNumber;
#endif  // !_MSC_VER

Call::Call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Call::InitAsDefaultInstance() {
}

Call::Call(const Call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Call::SharedCtor() {
  _cached_size_ = 0;
  uihookid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call::~Call() {
  SharedDtor();
}

void Call::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_descriptor_;
}

const Call& Call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2eproto();
  return *default_instance_;
}

Call* Call::default_instance_ = NULL;

Call* Call::New() const {
  return new Call;
}

void Call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uihookid_ = 0u;
  }
  uiparameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiHookId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uihookid_)));
          set_has_uihookid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiParameter;
        break;
      }

      // repeated uint64 uiParameter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiParameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_uiparameter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uiparameter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiParameter;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiHookId = 1;
  if (has_uihookid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uihookid(), output);
  }

  // repeated uint64 uiParameter = 2;
  for (int i = 0; i < this->uiparameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->uiparameter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiHookId = 1;
  if (has_uihookid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uihookid(), target);
  }

  // repeated uint64 uiParameter = 2;
  for (int i = 0; i < this->uiparameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->uiparameter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Call::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiHookId = 1;
    if (has_uihookid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uihookid());
    }

  }
  // repeated uint64 uiParameter = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uiparameter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uiparameter(i));
    }
    total_size += 1 * this->uiparameter_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call::MergeFrom(const Call& from) {
  GOOGLE_CHECK_NE(&from, this);
  uiparameter_.MergeFrom(from.uiparameter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uihookid()) {
      set_uihookid(from.uihookid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call::CopyFrom(const Call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Call::Swap(Call* other) {
  if (other != this) {
    std::swap(uihookid_, other->uihookid_);
    uiparameter_.Swap(&other->uiparameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_descriptor_;
  metadata.reflection = Call_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddHook::kUiHookIdFieldNumber;
const int AddHook::kStrDllNameFieldNumber;
const int AddHook::kStrFunctionNameFieldNumber;
const int AddHook::kUiNumParametersFieldNumber;
#endif  // !_MSC_VER

AddHook::AddHook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddHook::InitAsDefaultInstance() {
}

AddHook::AddHook(const AddHook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddHook::SharedCtor() {
  _cached_size_ = 0;
  uihookid_ = 0u;
  strdllname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strfunctionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uinumparameters_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddHook::~AddHook() {
  SharedDtor();
}

void AddHook::SharedDtor() {
  if (strdllname_ != &::google::protobuf::internal::kEmptyString) {
    delete strdllname_;
  }
  if (strfunctionname_ != &::google::protobuf::internal::kEmptyString) {
    delete strfunctionname_;
  }
  if (this != default_instance_) {
  }
}

void AddHook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddHook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddHook_descriptor_;
}

const AddHook& AddHook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2eproto();
  return *default_instance_;
}

AddHook* AddHook::default_instance_ = NULL;

AddHook* AddHook::New() const {
  return new AddHook;
}

void AddHook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uihookid_ = 0u;
    if (has_strdllname()) {
      if (strdllname_ != &::google::protobuf::internal::kEmptyString) {
        strdllname_->clear();
      }
    }
    if (has_strfunctionname()) {
      if (strfunctionname_ != &::google::protobuf::internal::kEmptyString) {
        strfunctionname_->clear();
      }
    }
    uinumparameters_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddHook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiHookId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uihookid_)));
          set_has_uihookid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strDllName;
        break;
      }

      // required string strDllName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDllName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strdllname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strdllname().data(), this->strdllname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strFunctionName;
        break;
      }

      // required string strFunctionName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strFunctionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strfunctionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strfunctionname().data(), this->strfunctionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiNumParameters;
        break;
      }

      // required uint32 uiNumParameters = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiNumParameters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uinumparameters_)));
          set_has_uinumparameters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddHook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiHookId = 1;
  if (has_uihookid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uihookid(), output);
  }

  // required string strDllName = 2;
  if (has_strdllname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdllname().data(), this->strdllname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strdllname(), output);
  }

  // required string strFunctionName = 3;
  if (has_strfunctionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfunctionname().data(), this->strfunctionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strfunctionname(), output);
  }

  // required uint32 uiNumParameters = 4;
  if (has_uinumparameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uinumparameters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddHook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiHookId = 1;
  if (has_uihookid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uihookid(), target);
  }

  // required string strDllName = 2;
  if (has_strdllname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdllname().data(), this->strdllname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strdllname(), target);
  }

  // required string strFunctionName = 3;
  if (has_strfunctionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfunctionname().data(), this->strfunctionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strfunctionname(), target);
  }

  // required uint32 uiNumParameters = 4;
  if (has_uinumparameters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uinumparameters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddHook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiHookId = 1;
    if (has_uihookid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uihookid());
    }

    // required string strDllName = 2;
    if (has_strdllname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strdllname());
    }

    // required string strFunctionName = 3;
    if (has_strfunctionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strfunctionname());
    }

    // required uint32 uiNumParameters = 4;
    if (has_uinumparameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uinumparameters());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddHook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddHook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddHook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddHook::MergeFrom(const AddHook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uihookid()) {
      set_uihookid(from.uihookid());
    }
    if (from.has_strdllname()) {
      set_strdllname(from.strdllname());
    }
    if (from.has_strfunctionname()) {
      set_strfunctionname(from.strfunctionname());
    }
    if (from.has_uinumparameters()) {
      set_uinumparameters(from.uinumparameters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddHook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddHook::CopyFrom(const AddHook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddHook::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AddHook::Swap(AddHook* other) {
  if (other != this) {
    std::swap(uihookid_, other->uihookid_);
    std::swap(strdllname_, other->strdllname_);
    std::swap(strfunctionname_, other->strfunctionname_);
    std::swap(uinumparameters_, other->uinumparameters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddHook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddHook_descriptor_;
  metadata.reflection = AddHook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveHook::kUiHookIdFieldNumber;
#endif  // !_MSC_VER

RemoveHook::RemoveHook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveHook::InitAsDefaultInstance() {
}

RemoveHook::RemoveHook(const RemoveHook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveHook::SharedCtor() {
  _cached_size_ = 0;
  uihookid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveHook::~RemoveHook() {
  SharedDtor();
}

void RemoveHook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveHook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveHook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveHook_descriptor_;
}

const RemoveHook& RemoveHook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2eproto();
  return *default_instance_;
}

RemoveHook* RemoveHook::default_instance_ = NULL;

RemoveHook* RemoveHook::New() const {
  return new RemoveHook;
}

void RemoveHook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uihookid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveHook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiHookId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uihookid_)));
          set_has_uihookid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveHook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiHookId = 1;
  if (has_uihookid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uihookid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveHook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiHookId = 1;
  if (has_uihookid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uihookid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveHook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiHookId = 1;
    if (has_uihookid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uihookid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveHook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveHook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveHook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveHook::MergeFrom(const RemoveHook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uihookid()) {
      set_uihookid(from.uihookid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveHook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveHook::CopyFrom(const RemoveHook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveHook::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveHook::Swap(RemoveHook* other) {
  if (other != this) {
    std::swap(uihookid_, other->uihookid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveHook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveHook_descriptor_;
  metadata.reflection = RemoveHook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonitorMessage::kMAddHookFieldNumber;
const int MonitorMessage::kMRemoveHookFieldNumber;
const int MonitorMessage::kMCallFieldNumber;
const int MonitorMessage::kBIsContinueFieldNumber;
#endif  // !_MSC_VER

MonitorMessage::MonitorMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonitorMessage::InitAsDefaultInstance() {
  maddhook_ = const_cast< ::ApiMonitor::ProtoBuf::AddHook*>(&::ApiMonitor::ProtoBuf::AddHook::default_instance());
  mremovehook_ = const_cast< ::ApiMonitor::ProtoBuf::RemoveHook*>(&::ApiMonitor::ProtoBuf::RemoveHook::default_instance());
  mcall_ = const_cast< ::ApiMonitor::ProtoBuf::Call*>(&::ApiMonitor::ProtoBuf::Call::default_instance());
}

MonitorMessage::MonitorMessage(const MonitorMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonitorMessage::SharedCtor() {
  _cached_size_ = 0;
  maddhook_ = NULL;
  mremovehook_ = NULL;
  mcall_ = NULL;
  biscontinue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonitorMessage::~MonitorMessage() {
  SharedDtor();
}

void MonitorMessage::SharedDtor() {
  if (this != default_instance_) {
    delete maddhook_;
    delete mremovehook_;
    delete mcall_;
  }
}

void MonitorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonitorMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonitorMessage_descriptor_;
}

const MonitorMessage& MonitorMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2eproto();
  return *default_instance_;
}

MonitorMessage* MonitorMessage::default_instance_ = NULL;

MonitorMessage* MonitorMessage::New() const {
  return new MonitorMessage;
}

void MonitorMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_maddhook()) {
      if (maddhook_ != NULL) maddhook_->::ApiMonitor::ProtoBuf::AddHook::Clear();
    }
    if (has_mremovehook()) {
      if (mremovehook_ != NULL) mremovehook_->::ApiMonitor::ProtoBuf::RemoveHook::Clear();
    }
    if (has_mcall()) {
      if (mcall_ != NULL) mcall_->::ApiMonitor::ProtoBuf::Call::Clear();
    }
    biscontinue_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonitorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ApiMonitor.ProtoBuf.AddHook mAddHook = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maddhook()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mRemoveHook;
        break;
      }

      // optional .ApiMonitor.ProtoBuf.RemoveHook mRemoveHook = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mRemoveHook:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mremovehook()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mCall;
        break;
      }

      // optional .ApiMonitor.ProtoBuf.Call mCall = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mCall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mcall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bIsContinue;
        break;
      }

      // optional bool bIsContinue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsContinue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biscontinue_)));
          set_has_biscontinue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonitorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ApiMonitor.ProtoBuf.AddHook mAddHook = 1;
  if (has_maddhook()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maddhook(), output);
  }

  // optional .ApiMonitor.ProtoBuf.RemoveHook mRemoveHook = 2;
  if (has_mremovehook()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mremovehook(), output);
  }

  // optional .ApiMonitor.ProtoBuf.Call mCall = 3;
  if (has_mcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mcall(), output);
  }

  // optional bool bIsContinue = 4;
  if (has_biscontinue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->biscontinue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonitorMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ApiMonitor.ProtoBuf.AddHook mAddHook = 1;
  if (has_maddhook()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maddhook(), target);
  }

  // optional .ApiMonitor.ProtoBuf.RemoveHook mRemoveHook = 2;
  if (has_mremovehook()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mremovehook(), target);
  }

  // optional .ApiMonitor.ProtoBuf.Call mCall = 3;
  if (has_mcall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mcall(), target);
  }

  // optional bool bIsContinue = 4;
  if (has_biscontinue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->biscontinue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonitorMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ApiMonitor.ProtoBuf.AddHook mAddHook = 1;
    if (has_maddhook()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maddhook());
    }

    // optional .ApiMonitor.ProtoBuf.RemoveHook mRemoveHook = 2;
    if (has_mremovehook()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mremovehook());
    }

    // optional .ApiMonitor.ProtoBuf.Call mCall = 3;
    if (has_mcall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mcall());
    }

    // optional bool bIsContinue = 4;
    if (has_biscontinue()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitorMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonitorMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonitorMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonitorMessage::MergeFrom(const MonitorMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maddhook()) {
      mutable_maddhook()->::ApiMonitor::ProtoBuf::AddHook::MergeFrom(from.maddhook());
    }
    if (from.has_mremovehook()) {
      mutable_mremovehook()->::ApiMonitor::ProtoBuf::RemoveHook::MergeFrom(from.mremovehook());
    }
    if (from.has_mcall()) {
      mutable_mcall()->::ApiMonitor::ProtoBuf::Call::MergeFrom(from.mcall());
    }
    if (from.has_biscontinue()) {
      set_biscontinue(from.biscontinue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonitorMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorMessage::CopyFrom(const MonitorMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorMessage::IsInitialized() const {

  if (has_maddhook()) {
    if (!this->maddhook().IsInitialized()) return false;
  }
  if (has_mremovehook()) {
    if (!this->mremovehook().IsInitialized()) return false;
  }
  if (has_mcall()) {
    if (!this->mcall().IsInitialized()) return false;
  }
  return true;
}

void MonitorMessage::Swap(MonitorMessage* other) {
  if (other != this) {
    std::swap(maddhook_, other->maddhook_);
    std::swap(mremovehook_, other->mremovehook_);
    std::swap(mcall_, other->mcall_);
    std::swap(biscontinue_, other->biscontinue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonitorMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonitorMessage_descriptor_;
  metadata.reflection = MonitorMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace ApiMonitor

// @@protoc_insertion_point(global_scope)
